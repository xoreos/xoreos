sudo: required
dist: xenial

language: cpp
compiler:
  - gcc
  - clang

os:
  - linux
  - osx

arch:
  - amd64
  - arm64

env:
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "oYIV1EmOvP2ruIxyCTPuGuqUsUzTxxu3P+IdlQZgV6aXaBxtFCuoQaLVMOlnx8xSI2V4mb5I/wK5fAtgUAomzDHQmaBNSbJc3xBTy2xgckup60ehKtFqf+ifm+AYcLQQgLtMUDmLNNcJIKUGPZ8GYwjNfWKt3VGuLHV+UFiRuQI="
    - coverity_scan_run_condition='\( "$CC" = "gcc" \) -a \( $USECMAKE -eq 1 \) -a \( "$TRAVIS_OS_NAME" = "linux" \) -a \( "$(uname -i)" = "x86_64" \)'
    - coverity_scan_script_test_mode=false
    # Various conditions where the Travis CI scripts should behave differently
    - is_coverity_branch='\( "$TRAVIS_BRANCH" = "coverity_scan" \)'
    - is_valid_config='\( ! '"$is_coverity_branch"' \) -o \( '"$coverity_scan_run_condition"' \)'
    - is_valid_osx='\( "$TRAVIS_OS_NAME" = "osx" \) -a \( '"$is_valid_config"' \)'
    - is_valid_linux='\( "$TRAVIS_OS_NAME" = "linux" \) -a \( '"$is_valid_config"' \)'
    - is_amd64='\( "$(uname -i)" = "x86_64" \)'
    - is_arm64='\( "$(uname -i)" = "aarch64" \)'
    - is_notcoverity_autot='\( ! '"$is_coverity_branch"' \) -a \( $USECMAKE -eq 0 \)'
    - is_notcoverity_cmake='\( ! '"$is_coverity_branch"' \) -a \( $USECMAKE -eq 1 \)'
  matrix:
    # Let's test both our autoconf and CMake build systems
    - USECMAKE=0
    - USECMAKE=1

matrix:
  exclude:
    # On Linux, we only need to test one compiler with both autools and CMake.
    # This gives us three builds on Linux: autotools+gcc, autotools+clang, CMake+gcc
    - compiler: clang
      os: linux
      env: USECMAKE=1
    # On macOS, gcc is deprecated, so we only build with clang there.
    # This gives us two builds on macOS: autotools+clang, CMake+clang
    - compiler: gcc
      os: osx
    # Do not compile for arm64 on osx yet.
    - arch: arm64
      os: osx

before_install:
  # Installing macOS dependencies, using brew
  - if eval [ $is_valid_osx ]; then brew update; fi
  - if eval [ $is_valid_osx ]; then brew install sdl2 openal-soft freetype mad faad2 libvorbis xvid libvpx zlib xz libxml2 ninja; fi
  # Installing Linux dependencies, using apt-get
  #
  # Here, we're also installing a new gcc, for C++11 support.
  # This is a bit of a complicated setup, because the C++ ABI change
  # means we can't mix-n-match C++ stuff from different sources
  #
  # So we do this in 3 steps:
  # 1) We add the Bionic repos, and upgrade the libc, gcc and binutils
  # 2) We remove libgl1-mesa-glx and libgl1-mesa-dev, because Ubuntu moved the packages around
  # 3) We install our library dependencies
  - if eval [ $is_valid_linux -a $is_amd64 ]; then echo "yes" | sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu bionic main universe restricted multiverse"; fi
  - if eval [ $is_valid_linux -a $is_amd64 ]; then echo "yes" | sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu bionic-updates main universe restricted multiverse"; fi
  - if eval [ $is_valid_linux -a $is_arm64 ]; then echo "yes" | sudo add-apt-repository "deb http://ports.ubuntu.com/ubuntu-ports bionic main universe restricted multiverse"; fi
  - if eval [ $is_valid_linux -a $is_arm64 ]; then echo "yes" | sudo add-apt-repository "deb http://ports.ubuntu.com/ubuntu-ports bionic-updates main universe restricted multiverse"; fi
  - if eval [ $is_valid_linux ]; then sudo apt-get update -qq; fi
  - if eval [ $is_valid_linux -a $is_arm64 ]; then echo "yes" | sudo apt-get -y remove udev; fi
  - if eval [ $is_valid_linux -a $is_arm64 ]; then echo "yes" | sudo apt-get -y autoremove; fi
  - if eval [ $is_valid_linux ]; then sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" -o APT::Force-LoopBreak=1 install build-essential libcurl4 make autoconf automake libtool dpkg dpkg-dev gcc g++ libc6-dev libc6 binutils binutils-dev; fi
  - if eval [ $is_valid_linux ]; then sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" -o APT::Force-LoopBreak=1 remove libgl1-mesa-glx libgl1-mesa-dev; fi
  - if eval [ $is_valid_linux ]; then sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" -o APT::Force-LoopBreak=1 install ninja-build libboost-all-dev libsdl2-dev libopenal-dev libfreetype6-dev libmad0-dev libfaad-dev libvorbis-dev libxvidcore-dev libvpx-dev libgl1 libgl-dev zlib1g-dev liblzma-dev libxml2-dev; fi

script:
  # autotools build system: ./autogen.sh && ./configure && make && make check
  - if eval [ $is_notcoverity_autot ]; then ./autogen.sh; fi
  - if eval [ $is_notcoverity_autot ]; then ./configure || (cat config.log; exit 1); fi
  - if eval [ $is_notcoverity_autot ]; then make -j4; fi
  - if eval [ $is_notcoverity_autot ]; then echo "" > test-suite.log; make -j4 check || (cat test-suite.log; exit 1); fi
  # CMake build system: cmake -G Ninja . && cmake --build . && cmake --build . --target check
  - if eval [ $is_notcoverity_cmake ]; then cmake -G Ninja .; fi
  - if eval [ $is_notcoverity_cmake ]; then cmake --build .; fi
  - if eval [ $is_notcoverity_cmake ]; then cmake --build . --target check; fi

addons:
  coverity_scan:
    build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis_coverity.sh
    project:
      name: $TRAVIS_REPO_SLUG
    notification_email: drmccoy@drmccoy.de
    build_command_prepend: "cmake -G Ninja ."
    build_command: "cmake --build . --target check"
    branch_pattern: coverity_scan

notifications:
  email:
    recipients:
      - ndbrandes@gmail.com
    on_success: change
    on_failure: always
  irc:
    channels:
      - secure: "Q7G5gmVRO67LIAhic4NoeiPRtygiOqjEfPZMIHqgTcpd1OkD8u/Sv9zhfYORfCIqKX1TruL6to6O/4q0HdjQ4NL4GfiNB0iYc+JCinmg80ekPLjjxBIvHmrsvz8onTAmxyYFacXM0YNurCMVvuD0F/yUaiTWwVcRY7PId8T8KPk="
    on_success: change
    on_failure: always
    use_notice: true
